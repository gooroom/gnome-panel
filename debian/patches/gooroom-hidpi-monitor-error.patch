diff --git a/data/org.gnome.gnome-panel.toplevel.gschema.xml b/data/org.gnome.gnome-panel.toplevel.gschema.xml
index 873549a..a19faa4 100644
--- a/data/org.gnome.gnome-panel.toplevel.gschema.xml
+++ b/data/org.gnome.gnome-panel.toplevel.gschema.xml
@@ -5,16 +5,6 @@
       <summary>Name to identify panel</summary>
       <description>This is a human readable name which you can use to identify a panel. Its main purpose is to serve as the panel's window title which is useful when navigating between panels.</description>
     </key>
-    <key name="monitor" type="i">
-      <default>0</default>
-      <summary>Xinerama monitor where the panel is displayed</summary>
-      <description>In a Xinerama setup, you may have panels on each individual monitor. This key identifies the current monitor the panel is displayed on.</description>
-    </key>
-    <key name="expand" type="b">
-      <default>true</default>
-      <summary>Expand to occupy entire screen width</summary>
-      <description>If true, the panel will occupy the entire screen width (height if this is a vertical panel). In this mode the panel can only be placed at a screen edge. If false, the panel will only be large enough to accommodate the applets, launchers and buttons on the panel.</description>
-    </key>
     <key name="orientation" enum="org.gnome.gnome-panel.PanelOrientation">
       <default>'top'</default>
       <summary>Panel orientation</summary>
@@ -25,36 +15,6 @@
       <summary>Panel size</summary>
       <description>The height (width for a vertical panel) of the panel. The panel will determine at runtime a minimum size based on the font size and other indicators. The maximum size is fixed at one quarter of the screen height (or width).</description>
     </key>
-    <key name="x" type="i">
-      <default>0</default>
-      <summary>X co-ordinate of panel</summary>
-      <description>The location of the panel along the x-axis. This key is only relevant in un-expanded mode. In expanded mode this key is ignored and the panel is placed at the screen edge specified by the orientation key.</description>
-    </key>
-    <key name="y" type="i">
-      <default>0</default>
-      <summary>Y co-ordinate of panel</summary>
-      <description>The location of the panel along the y-axis. This key is only relevant in un-expanded mode. In expanded mode this key is ignored and the panel is placed at the screen edge specified by the orientation key.</description>
-    </key>
-    <key name="x-right" type="i">
-      <default>-1</default>
-      <summary>X co-ordinate of panel, starting from the right of the screen</summary>
-      <description>The location of the panel along the x-axis, starting from the right of  the screen. If set to -1, the value is ignored and the value of the x key is used. If the value is greater than 0, then the value of the x key is ignored. This key is only relevant in un-expanded mode. In expanded mode this key is ignored and the panel is placed at the screen edge specified by the orientation key.</description>
-    </key>
-    <key name="y-bottom" type="i">
-      <default>-1</default>
-      <summary>Y co-ordinate of panel, starting from the bottom of the screen</summary>
-      <description>The location of the panel along the y-axis, starting from the bottom of  the screen. If set to -1, the value is ignored and the value of the y key is used. If the value is greater than 0, then the value of the y key is ignored. This key is only relevant in un-expanded mode. In expanded mode this key is ignored and the panel is placed at the screen edge specified by the orientation key.</description>
-    </key>
-    <key name="x-centered" type="b">
-      <default>false</default>
-      <summary>Center panel on x-axis</summary>
-      <description>If true, the x and x_right keys are ignored and the panel is placed at the center of the x-axis of the screen. If the panel is resized it will remain at that position - i.e. the panel will grow on both sides. If false, the x and x_right keys specify the location of the panel.</description>
-    </key>
-    <key name="y-centered" type="b">
-      <default>false</default>
-      <summary>Center panel on y-axis</summary>
-      <description>If true, the y and y_bottom keys are ignored and the panel is placed at the center of the y-axis of the screen. If the panel is resized it will remain at that position - i.e. the panel will grow on both sides. If false, the y and y_bottom keys specify the location of the panel.</description>
-    </key>
     <key name="auto-hide" type="b">
       <default>false</default>
       <summary>Automatically hide panel into corner</summary>
diff --git a/data/panel-default-layout.layout b/data/panel-default-layout.layout
index 079c00d..45f459b 100644
--- a/data/panel-default-layout.layout
+++ b/data/panel-default-layout.layout
@@ -1,13 +1,10 @@
 [Toplevel top-panel]
-expand=true
 orientation=top
 size=24
 
 [Toplevel bottom-panel]
-expand=true
 orientation=bottom
 size=24
-y-bottom=0
 
 [Object menu-bar]
 object-iid=PanelInternalFactory::MenuBar
diff --git a/gnome-panel/gp-properties-dialog.c b/gnome-panel/gp-properties-dialog.c
index d0f11ba..f9aa7bc 100644
--- a/gnome-panel/gp-properties-dialog.c
+++ b/gnome-panel/gp-properties-dialog.c
@@ -35,7 +35,6 @@ struct _GpPropertiesDialog
 
   GtkWidget *orientation;
   GtkWidget *size;
-  GtkWidget *expand;
   GtkWidget *auto_hide;
   GtkWidget *enable_buttons;
   GtkWidget *enable_arrows;
@@ -223,10 +222,6 @@ setup_toplevel_bindings (GpPropertiesDialog *dialog)
                    dialog->size, "value",
                    G_SETTINGS_BIND_DEFAULT);
 
-  g_settings_bind (dialog->toplevel, "expand",
-                   dialog->expand, "active",
-                   G_SETTINGS_BIND_DEFAULT);
-
   g_settings_bind (dialog->toplevel, "auto-hide",
                    dialog->auto_hide, "active",
                    G_SETTINGS_BIND_DEFAULT);
@@ -326,7 +321,7 @@ toplevel_writable_change_event_cb (GSettings          *settings,
                                    GpPropertiesDialog *dialog)
 {
   const gchar *toplevel[] = {
-    "orientation", "size", "expand", "auto-hide",
+    "orientation", "size", "auto-hide",
     "enable-buttons", "enable-arrows", NULL
   };
   gboolean writable;
@@ -473,7 +468,6 @@ bind_template (GtkWidgetClass *widget_class)
 
   gtk_widget_class_bind_template_child (widget_class, GpPropertiesDialog, orientation);
   gtk_widget_class_bind_template_child (widget_class, GpPropertiesDialog, size);
-  gtk_widget_class_bind_template_child (widget_class, GpPropertiesDialog, expand);
   gtk_widget_class_bind_template_child (widget_class, GpPropertiesDialog, auto_hide);
   gtk_widget_class_bind_template_child (widget_class, GpPropertiesDialog, enable_buttons);
   gtk_widget_class_bind_template_child (widget_class, GpPropertiesDialog, enable_arrows);
diff --git a/gnome-panel/gp-properties-dialog.ui b/gnome-panel/gp-properties-dialog.ui
index e387787..02d6f0a 100644
--- a/gnome-panel/gp-properties-dialog.ui
+++ b/gnome-panel/gp-properties-dialog.ui
@@ -205,21 +205,6 @@
                     <property name="can_focus">False</property>
                     <property name="margin_left">6</property>
                     <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkCheckButton" id="expand">
-                        <property name="label" translatable="yes">E_xpand</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="use_underline">True</property>
-                        <property name="draw_indicator">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
                     <child>
                       <object class="GtkCheckButton" id="auto_hide">
                         <property name="label" translatable="yes">_Autohide</property>
diff --git a/gnome-panel/main.c b/gnome-panel/main.c
index 1336202..a0588a2 100644
--- a/gnome-panel/main.c
+++ b/gnome-panel/main.c
@@ -145,7 +145,7 @@ main (int argc, char **argv)
 	gtk_init (&argc, &argv);
 
 	/* FIXME: High dpi scaling does not work... */
-	gdk_x11_display_set_window_scale (gdk_display_get_default (), 1);
+//	gdk_x11_display_set_window_scale (gdk_display_get_default (), 1);
 
 	g_unix_signal_add (SIGTERM, on_term_signal, NULL);
 	g_unix_signal_add (SIGINT, on_int_signal, NULL);
diff --git a/gnome-panel/panel-layout.c b/gnome-panel/panel-layout.c
index 1ca1159..1e5bc27 100644
--- a/gnome-panel/panel-layout.c
+++ b/gnome-panel/panel-layout.c
@@ -88,16 +88,8 @@ typedef struct {
 
 static PanelLayoutKeyDefinition panel_layout_toplevel_keys[] = {
         { PANEL_TOPLEVEL_NAME_KEY,            G_TYPE_STRING   },
-        { PANEL_TOPLEVEL_MONITOR_KEY,         G_TYPE_INT      },
-        { PANEL_TOPLEVEL_EXPAND_KEY,          G_TYPE_BOOLEAN  },
         { PANEL_TOPLEVEL_ORIENTATION_KEY,     G_TYPE_STRING   },
         { PANEL_TOPLEVEL_SIZE_KEY,            G_TYPE_INT      },
-        { PANEL_TOPLEVEL_X_KEY,               G_TYPE_INT      },
-        { PANEL_TOPLEVEL_Y_KEY,               G_TYPE_INT      },
-        { PANEL_TOPLEVEL_X_RIGHT_KEY,         G_TYPE_INT      },
-        { PANEL_TOPLEVEL_Y_BOTTOM_KEY,        G_TYPE_INT      },
-        { PANEL_TOPLEVEL_X_CENTERED_KEY,      G_TYPE_BOOLEAN  },
-        { PANEL_TOPLEVEL_Y_CENTERED_KEY,      G_TYPE_BOOLEAN  },
         { PANEL_TOPLEVEL_AUTO_HIDE_KEY,       G_TYPE_BOOLEAN  },
         { PANEL_TOPLEVEL_ENABLE_BUTTONS_KEY,  G_TYPE_BOOLEAN  },
         { PANEL_TOPLEVEL_ENABLE_ARROWS_KEY,   G_TYPE_BOOLEAN  },
@@ -627,9 +619,6 @@ panel_layout_toplevel_create (GdkScreen *screen)
                 g_settings_set_enum (settings,
                                      PANEL_TOPLEVEL_ORIENTATION_KEY,
                                      orientation);
-                g_settings_set_int (settings,
-                                    PANEL_TOPLEVEL_MONITOR_KEY,
-                                    monitor);
         }
 
         g_object_unref (settings);
diff --git a/gnome-panel/panel-multiscreen.c b/gnome-panel/panel-multiscreen.c
index ca6fd68..756fba1 100644
--- a/gnome-panel/panel-multiscreen.c
+++ b/gnome-panel/panel-multiscreen.c
@@ -429,7 +429,7 @@ panel_multiscreen_init (void)
 	display = gdk_display_get_default ();
 	screens = 1;
 
-	panel_multiscreen_init_randr (display);
+//	panel_multiscreen_init_randr (display);
 
 	monitors   = g_new0 (int, screens);
 	geometries = g_new0 (GdkRectangle *, screens);
diff --git a/gnome-panel/panel-schemas.h b/gnome-panel/panel-schemas.h
index ffb7af6..3bee4b8 100644
--- a/gnome-panel/panel-schemas.h
+++ b/gnome-panel/panel-schemas.h
@@ -35,16 +35,8 @@
 
 #define PANEL_TOPLEVEL_SCHEMA               "org.gnome.gnome-panel.toplevel"
 #define PANEL_TOPLEVEL_NAME_KEY             "name"
-#define PANEL_TOPLEVEL_MONITOR_KEY          "monitor"
-#define PANEL_TOPLEVEL_EXPAND_KEY           "expand"
 #define PANEL_TOPLEVEL_ORIENTATION_KEY      "orientation"
 #define PANEL_TOPLEVEL_SIZE_KEY             "size"
-#define PANEL_TOPLEVEL_X_KEY                "x"
-#define PANEL_TOPLEVEL_Y_KEY                "y"
-#define PANEL_TOPLEVEL_X_RIGHT_KEY          "x-right"
-#define PANEL_TOPLEVEL_Y_BOTTOM_KEY         "y-bottom"
-#define PANEL_TOPLEVEL_X_CENTERED_KEY       "x-centered"
-#define PANEL_TOPLEVEL_Y_CENTERED_KEY       "y-centered"
 #define PANEL_TOPLEVEL_AUTO_HIDE_KEY        "auto-hide"
 #define PANEL_TOPLEVEL_ENABLE_BUTTONS_KEY   "enable-buttons"
 #define PANEL_TOPLEVEL_ENABLE_ARROWS_KEY    "enable-arrows"
diff --git a/gnome-panel/panel-struts.c b/gnome-panel/panel-struts.c
index 2bc4bda..e05cfdf 100644
--- a/gnome-panel/panel-struts.c
+++ b/gnome-panel/panel-struts.c
@@ -253,6 +253,15 @@ panel_struts_set_window_hint (PanelToplevel *toplevel)
 	int         monitor_x, monitor_y, monitor_width, monitor_height;
 	int         screen_width, screen_height;
 	int         leftmost, rightmost, topmost, bottommost;
+	GdkDisplay *dpy;
+	GdkScreen  *screen;
+	GdkWindow  *root;
+	gint        scale_factor;
+
+	dpy = gdk_display_get_default ();
+	screen = gdk_display_get_default_screen (dpy);
+	root = gdk_screen_get_root_window (screen);
+	scale_factor = gdk_window_get_scale_factor (root);
 
 	widget = GTK_WIDGET (toplevel);
 
@@ -264,7 +273,7 @@ panel_struts_set_window_hint (PanelToplevel *toplevel)
 		return;
 	}
 
-	strut_size = strut->allocated_strut_size;
+	strut_size = strut->allocated_strut_size * scale_factor;
 
 	screen_width  = gdk_screen_get_width  (strut->screen);
 	screen_height = gdk_screen_get_height (strut->screen);
@@ -286,22 +295,22 @@ panel_struts_set_window_hint (PanelToplevel *toplevel)
 	switch (strut->orientation) {
 	case PANEL_ORIENTATION_TOP:
 		if (monitor_y > 0)
-			strut_size += monitor_y;
+			strut_size += monitor_y * scale_factor;
 		if (!topmost) strut_size = 0;
 		break;
 	case PANEL_ORIENTATION_BOTTOM:
 		if (monitor_y + monitor_height < screen_height)
-			strut_size += screen_height - (monitor_y + monitor_height);
+			strut_size += (screen_height - (monitor_y + monitor_height)) * scale_factor;
 		if (!bottommost) strut_size = 0;
 		break;
 	case PANEL_ORIENTATION_LEFT:
 		if (leftmost && monitor_x > 0)
-			strut_size += monitor_x;
+			strut_size += monitor_x * scale_factor;
 		if (!leftmost) strut_size = 0;
 		break;
 	case PANEL_ORIENTATION_RIGHT:
 		if (monitor_x + monitor_width < screen_width)
-			strut_size += screen_width - (monitor_x + monitor_width);
+			strut_size += (screen_width - (monitor_x + monitor_width)) * scale_factor;
 		if (!rightmost) strut_size = 0;
 		break;
 	default:
@@ -312,8 +321,8 @@ panel_struts_set_window_hint (PanelToplevel *toplevel)
 	panel_xutils_set_strut (gtk_widget_get_window (widget),
 				strut->orientation,
 				strut_size,
-				strut->allocated_strut_start,
-				strut->allocated_strut_end);
+				strut->allocated_strut_start * scale_factor,
+				(strut->allocated_strut_end + 1)* scale_factor - 1);
 }
 
 void
diff --git a/gnome-panel/panel-toplevel.c b/gnome-panel/panel-toplevel.c
index 017777c..69d87f0 100644
--- a/gnome-panel/panel-toplevel.c
+++ b/gnome-panel/panel-toplevel.c
@@ -3673,8 +3673,8 @@ panel_toplevel_class_init (PanelToplevelClass *klass)
 	widget_class->get_preferred_height = panel_toplevel_get_preferred_height;
 	widget_class->size_allocate        = panel_toplevel_size_allocate;
 	widget_class->draw                 = panel_toplevel_draw;
-	widget_class->button_press_event   = panel_toplevel_button_press_event;
-	widget_class->button_release_event = panel_toplevel_button_release_event;
+//	widget_class->button_press_event   = panel_toplevel_button_press_event;
+//	widget_class->button_release_event = panel_toplevel_button_release_event;
 	widget_class->key_press_event      = panel_toplevel_key_press_event;
 	widget_class->motion_notify_event  = panel_toplevel_motion_notify_event;
 	widget_class->enter_notify_event   = panel_toplevel_enter_notify_event;
@@ -4186,28 +4186,15 @@ static gboolean
 panel_toplevel_position_is_writable (PanelToplevel *toplevel)
 {
 	if (panel_lockdown_get_panels_locked_down_s () ||
-	    !(g_settings_is_writable (toplevel->priv->settings,
-				      PANEL_TOPLEVEL_MONITOR_KEY) &&
-	      g_settings_is_writable (toplevel->priv->settings,
-				      PANEL_TOPLEVEL_ORIENTATION_KEY)))
+	    !g_settings_is_writable (toplevel->priv->settings,
+				      PANEL_TOPLEVEL_ORIENTATION_KEY))
 		return FALSE;
 
 	/* For expanded panels we don't really have to check x and y */
 	if (panel_toplevel_get_expand (toplevel))
 		return TRUE;
 
-	return (g_settings_is_writable (toplevel->priv->settings,
-					PANEL_TOPLEVEL_X_KEY) &&
-		g_settings_is_writable (toplevel->priv->settings,
-					PANEL_TOPLEVEL_Y_KEY) &&
-		g_settings_is_writable (toplevel->priv->settings,
-					PANEL_TOPLEVEL_X_RIGHT_KEY) &&
-		g_settings_is_writable (toplevel->priv->settings,
-					PANEL_TOPLEVEL_Y_BOTTOM_KEY) &&
-		g_settings_is_writable (toplevel->priv->settings,
-					PANEL_TOPLEVEL_X_CENTERED_KEY) &&
-		g_settings_is_writable (toplevel->priv->settings,
-					PANEL_TOPLEVEL_Y_CENTERED_KEY));
+	return FALSE;
 }
 
 static gboolean
@@ -4236,12 +4223,6 @@ panel_toplevel_bind_gsettings (PanelToplevel *toplevel)
 {
 	/* Delayed settings: the ones related to the position */
 
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_MONITOR_KEY,
-			 toplevel,
-			 "monitor",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
 	g_settings_bind (toplevel->priv->delayed_settings,
 			 PANEL_TOPLEVEL_SIZE_KEY,
 			 toplevel,
@@ -4254,42 +4235,6 @@ panel_toplevel_bind_gsettings (PanelToplevel *toplevel)
 			 "orientation",
 			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
 
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_X_KEY,
-			 toplevel,
-			 "x",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_X_RIGHT_KEY,
-			 toplevel,
-			 "x-right",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_X_CENTERED_KEY,
-			 toplevel,
-			 "x-centered",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_Y_KEY,
-			 toplevel,
-			 "y",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_Y_BOTTOM_KEY,
-			 toplevel,
-			 "y-bottom",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
-	g_settings_bind (toplevel->priv->delayed_settings,
-			 PANEL_TOPLEVEL_Y_CENTERED_KEY,
-			 toplevel,
-			 "y-centered",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
 	/* Normal settings */
 
 	g_settings_bind (toplevel->priv->settings,
@@ -4298,12 +4243,6 @@ panel_toplevel_bind_gsettings (PanelToplevel *toplevel)
 			 "panel-name",
 			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
 
-	g_settings_bind (toplevel->priv->settings,
-			 PANEL_TOPLEVEL_EXPAND_KEY,
-			 toplevel,
-			 "expand",
-			 G_SETTINGS_BIND_DEFAULT|G_SETTINGS_BIND_NO_SENSITIVITY);
-
 	g_settings_bind (toplevel->priv->settings,
 			 PANEL_TOPLEVEL_AUTO_HIDE_KEY,
 			 toplevel,
@@ -4460,33 +4399,33 @@ panel_toplevel_set_expand (PanelToplevel *toplevel,
 {
 	g_return_if_fail (PANEL_IS_TOPLEVEL (toplevel));
 
-	expand = expand != FALSE;
-
-	if (toplevel->priv->expand == expand)
-		return;
-
-	toplevel->priv->expand = expand;
-
-	if (!toplevel->priv->expand &&
-	    toplevel->priv->updated_geometry_initial) {
-		switch (toplevel->priv->orientation) {
-		case PANEL_ORIENTATION_TOP:
-			panel_toplevel_set_x (toplevel, 0, -1, TRUE);
-			break;
-		case PANEL_ORIENTATION_BOTTOM:
-			panel_toplevel_set_x (toplevel, 0, 0, TRUE);
-			break;
-		case PANEL_ORIENTATION_LEFT:
-			panel_toplevel_set_y (toplevel, 0, -1, TRUE);
-			break;
-		case PANEL_ORIENTATION_RIGHT:
-			panel_toplevel_set_y (toplevel, 0, 0, TRUE);
-			break;
-		default:
-			g_assert_not_reached ();
-			break;
-		}
-	}
+//	expand = expand != FALSE;
+//
+//	if (toplevel->priv->expand == expand)
+//		return;
+//
+//	toplevel->priv->expand = expand;
+//
+//	if (!toplevel->priv->expand &&
+//	    toplevel->priv->updated_geometry_initial) {
+//		switch (toplevel->priv->orientation) {
+//		case PANEL_ORIENTATION_TOP:
+//			panel_toplevel_set_x (toplevel, 0, -1, TRUE);
+//			break;
+//		case PANEL_ORIENTATION_BOTTOM:
+//			panel_toplevel_set_x (toplevel, 0, 0, TRUE);
+//			break;
+//		case PANEL_ORIENTATION_LEFT:
+//			panel_toplevel_set_y (toplevel, 0, -1, TRUE);
+//			break;
+//		case PANEL_ORIENTATION_RIGHT:
+//			panel_toplevel_set_y (toplevel, 0, 0, TRUE);
+//			break;
+//		default:
+//			g_assert_not_reached ();
+//			break;
+//		}
+//	}
 
 	gtk_widget_queue_resize (GTK_WIDGET (toplevel));
 
@@ -4806,20 +4745,33 @@ panel_toplevel_update_monitor (PanelToplevel *toplevel)
 
 	display = gdk_display_get_default ();
 
-	/* If we were not using the configured monitor, can we use it now? */
-	if ((toplevel->priv->configured_monitor != -1) &&
-	    (toplevel->priv->configured_monitor != toplevel->priv->monitor) &&
-	    toplevel->priv->configured_monitor < gdk_display_get_n_monitors (display)) {
-		panel_toplevel_set_monitor_internal (toplevel,
-						     toplevel->priv->configured_monitor,
-						     FALSE);
-
-	/* else, can we still use the monitor we were using? */
-	} else if (toplevel->priv->monitor >= gdk_display_get_n_monitors (display)) {
-		panel_toplevel_set_monitor_internal (toplevel,
-						     0,
-						     FALSE);
+	int i, n_monitors, selection;
+	n_monitors = gdk_display_get_n_monitors (display);
+	for (i = 0; i < n_monitors; i++) {
+		GdkRectangle geo;
+		GdkMonitor *m = gdk_display_get_monitor (display, i);
+        gdk_monitor_get_geometry (m, &geo);
+
+		if (gdk_monitor_is_primary (m))
+			break;
 	}
+
+	panel_toplevel_set_monitor_internal (toplevel, i, FALSE);
+
+//	/* If we were not using the configured monitor, can we use it now? */
+//	if ((toplevel->priv->configured_monitor != -1) &&
+//	    (toplevel->priv->configured_monitor != toplevel->priv->monitor) &&
+//	    toplevel->priv->configured_monitor < gdk_display_get_n_monitors (display)) {
+//		panel_toplevel_set_monitor_internal (toplevel,
+//						     toplevel->priv->configured_monitor,
+//						     FALSE);
+//
+//	/* else, can we still use the monitor we were using? */
+//	} else if (toplevel->priv->monitor >= gdk_display_get_n_monitors (display)) {
+//		panel_toplevel_set_monitor_internal (toplevel,
+//						     0,
+//						     FALSE);
+//	}
 }
 
 void
