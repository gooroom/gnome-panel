/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GP_DM_SEAT_GEN_H__
#define __GP_DM_SEAT_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DisplayManager.Seat */

#define GP_TYPE_DM_SEAT_GEN (gp_dm_seat_gen_get_type ())
#define GP_DM_SEAT_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GP_TYPE_DM_SEAT_GEN, GpDmSeatGen))
#define GP_IS_DM_SEAT_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GP_TYPE_DM_SEAT_GEN))
#define GP_DM_SEAT_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GP_TYPE_DM_SEAT_GEN, GpDmSeatGenIface))

struct _GpDmSeatGen;
typedef struct _GpDmSeatGen GpDmSeatGen;
typedef struct _GpDmSeatGenIface GpDmSeatGenIface;

struct _GpDmSeatGenIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_switch_to_greeter) (
    GpDmSeatGen *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_can_switch) (GpDmSeatGen *object);

};

GType gp_dm_seat_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gp_dm_seat_gen_interface_info (void);
guint gp_dm_seat_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gp_dm_seat_gen_complete_switch_to_greeter (
    GpDmSeatGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gp_dm_seat_gen_call_switch_to_greeter (
    GpDmSeatGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gp_dm_seat_gen_call_switch_to_greeter_finish (
    GpDmSeatGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gp_dm_seat_gen_call_switch_to_greeter_sync (
    GpDmSeatGen *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean gp_dm_seat_gen_get_can_switch (GpDmSeatGen *object);
void gp_dm_seat_gen_set_can_switch (GpDmSeatGen *object, gboolean value);


/* ---- */

#define GP_TYPE_DM_SEAT_GEN_PROXY (gp_dm_seat_gen_proxy_get_type ())
#define GP_DM_SEAT_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GP_TYPE_DM_SEAT_GEN_PROXY, GpDmSeatGenProxy))
#define GP_DM_SEAT_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GP_TYPE_DM_SEAT_GEN_PROXY, GpDmSeatGenProxyClass))
#define GP_DM_SEAT_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GP_TYPE_DM_SEAT_GEN_PROXY, GpDmSeatGenProxyClass))
#define GP_IS_DM_SEAT_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GP_TYPE_DM_SEAT_GEN_PROXY))
#define GP_IS_DM_SEAT_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GP_TYPE_DM_SEAT_GEN_PROXY))

typedef struct _GpDmSeatGenProxy GpDmSeatGenProxy;
typedef struct _GpDmSeatGenProxyClass GpDmSeatGenProxyClass;
typedef struct _GpDmSeatGenProxyPrivate GpDmSeatGenProxyPrivate;

struct _GpDmSeatGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GpDmSeatGenProxyPrivate *priv;
};

struct _GpDmSeatGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gp_dm_seat_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GpDmSeatGenProxy, g_object_unref)
#endif

void gp_dm_seat_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpDmSeatGen *gp_dm_seat_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GpDmSeatGen *gp_dm_seat_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gp_dm_seat_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpDmSeatGen *gp_dm_seat_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GpDmSeatGen *gp_dm_seat_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GP_TYPE_DM_SEAT_GEN_SKELETON (gp_dm_seat_gen_skeleton_get_type ())
#define GP_DM_SEAT_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GP_TYPE_DM_SEAT_GEN_SKELETON, GpDmSeatGenSkeleton))
#define GP_DM_SEAT_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GP_TYPE_DM_SEAT_GEN_SKELETON, GpDmSeatGenSkeletonClass))
#define GP_DM_SEAT_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GP_TYPE_DM_SEAT_GEN_SKELETON, GpDmSeatGenSkeletonClass))
#define GP_IS_DM_SEAT_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GP_TYPE_DM_SEAT_GEN_SKELETON))
#define GP_IS_DM_SEAT_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GP_TYPE_DM_SEAT_GEN_SKELETON))

typedef struct _GpDmSeatGenSkeleton GpDmSeatGenSkeleton;
typedef struct _GpDmSeatGenSkeletonClass GpDmSeatGenSkeletonClass;
typedef struct _GpDmSeatGenSkeletonPrivate GpDmSeatGenSkeletonPrivate;

struct _GpDmSeatGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GpDmSeatGenSkeletonPrivate *priv;
};

struct _GpDmSeatGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gp_dm_seat_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GpDmSeatGenSkeleton, g_object_unref)
#endif

GpDmSeatGen *gp_dm_seat_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GP_DM_SEAT_GEN_H__ */
