/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __SN_HOST_V0_GEN_H__
#define __SN_HOST_V0_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.kde.StatusNotifierHost */

#define SN_TYPE_HOST_V0_GEN (sn_host_v0_gen_get_type ())
#define SN_HOST_V0_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SN_TYPE_HOST_V0_GEN, SnHostV0Gen))
#define SN_IS_HOST_V0_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SN_TYPE_HOST_V0_GEN))
#define SN_HOST_V0_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), SN_TYPE_HOST_V0_GEN, SnHostV0GenIface))

struct _SnHostV0Gen;
typedef struct _SnHostV0Gen SnHostV0Gen;
typedef struct _SnHostV0GenIface SnHostV0GenIface;

struct _SnHostV0GenIface
{
  GTypeInterface parent_iface;
};

GType sn_host_v0_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *sn_host_v0_gen_interface_info (void);
guint sn_host_v0_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* ---- */

#define SN_TYPE_HOST_V0_GEN_PROXY (sn_host_v0_gen_proxy_get_type ())
#define SN_HOST_V0_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SN_TYPE_HOST_V0_GEN_PROXY, SnHostV0GenProxy))
#define SN_HOST_V0_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SN_TYPE_HOST_V0_GEN_PROXY, SnHostV0GenProxyClass))
#define SN_HOST_V0_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SN_TYPE_HOST_V0_GEN_PROXY, SnHostV0GenProxyClass))
#define SN_IS_HOST_V0_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SN_TYPE_HOST_V0_GEN_PROXY))
#define SN_IS_HOST_V0_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SN_TYPE_HOST_V0_GEN_PROXY))

typedef struct _SnHostV0GenProxy SnHostV0GenProxy;
typedef struct _SnHostV0GenProxyClass SnHostV0GenProxyClass;
typedef struct _SnHostV0GenProxyPrivate SnHostV0GenProxyPrivate;

struct _SnHostV0GenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  SnHostV0GenProxyPrivate *priv;
};

struct _SnHostV0GenProxyClass
{
  GDBusProxyClass parent_class;
};

GType sn_host_v0_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SnHostV0GenProxy, g_object_unref)
#endif

void sn_host_v0_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SnHostV0Gen *sn_host_v0_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
SnHostV0Gen *sn_host_v0_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void sn_host_v0_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
SnHostV0Gen *sn_host_v0_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
SnHostV0Gen *sn_host_v0_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define SN_TYPE_HOST_V0_GEN_SKELETON (sn_host_v0_gen_skeleton_get_type ())
#define SN_HOST_V0_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), SN_TYPE_HOST_V0_GEN_SKELETON, SnHostV0GenSkeleton))
#define SN_HOST_V0_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), SN_TYPE_HOST_V0_GEN_SKELETON, SnHostV0GenSkeletonClass))
#define SN_HOST_V0_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), SN_TYPE_HOST_V0_GEN_SKELETON, SnHostV0GenSkeletonClass))
#define SN_IS_HOST_V0_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), SN_TYPE_HOST_V0_GEN_SKELETON))
#define SN_IS_HOST_V0_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), SN_TYPE_HOST_V0_GEN_SKELETON))

typedef struct _SnHostV0GenSkeleton SnHostV0GenSkeleton;
typedef struct _SnHostV0GenSkeletonClass SnHostV0GenSkeletonClass;
typedef struct _SnHostV0GenSkeletonPrivate SnHostV0GenSkeletonPrivate;

struct _SnHostV0GenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  SnHostV0GenSkeletonPrivate *priv;
};

struct _SnHostV0GenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType sn_host_v0_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SnHostV0GenSkeleton, g_object_unref)
#endif

SnHostV0Gen *sn_host_v0_gen_skeleton_new (void);


G_END_DECLS

#endif /* __SN_HOST_V0_GEN_H__ */
