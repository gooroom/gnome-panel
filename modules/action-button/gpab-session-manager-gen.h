/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GPAB_SESSION_MANAGER_GEN_H__
#define __GPAB_SESSION_MANAGER_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SessionManager */

#define GPAB_TYPE_SESSION_MANAGER_GEN (gpab_session_manager_gen_get_type ())
#define GPAB_SESSION_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPAB_TYPE_SESSION_MANAGER_GEN, GpabSessionManagerGen))
#define GPAB_IS_SESSION_MANAGER_GEN(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPAB_TYPE_SESSION_MANAGER_GEN))
#define GPAB_SESSION_MANAGER_GEN_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GPAB_TYPE_SESSION_MANAGER_GEN, GpabSessionManagerGenIface))

struct _GpabSessionManagerGen;
typedef struct _GpabSessionManagerGen GpabSessionManagerGen;
typedef struct _GpabSessionManagerGenIface GpabSessionManagerGenIface;

struct _GpabSessionManagerGenIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_can_shutdown) (
    GpabSessionManagerGen *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_logout) (
    GpabSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    guint arg_mode);

  gboolean (*handle_shutdown) (
    GpabSessionManagerGen *object,
    GDBusMethodInvocation *invocation);

};

GType gpab_session_manager_gen_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gpab_session_manager_gen_interface_info (void);
guint gpab_session_manager_gen_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gpab_session_manager_gen_complete_shutdown (
    GpabSessionManagerGen *object,
    GDBusMethodInvocation *invocation);

void gpab_session_manager_gen_complete_can_shutdown (
    GpabSessionManagerGen *object,
    GDBusMethodInvocation *invocation,
    gboolean is_available);

void gpab_session_manager_gen_complete_logout (
    GpabSessionManagerGen *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void gpab_session_manager_gen_call_shutdown (
    GpabSessionManagerGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gpab_session_manager_gen_call_shutdown_finish (
    GpabSessionManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gpab_session_manager_gen_call_shutdown_sync (
    GpabSessionManagerGen *proxy,
    GCancellable *cancellable,
    GError **error);

void gpab_session_manager_gen_call_can_shutdown (
    GpabSessionManagerGen *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gpab_session_manager_gen_call_can_shutdown_finish (
    GpabSessionManagerGen *proxy,
    gboolean *out_is_available,
    GAsyncResult *res,
    GError **error);

gboolean gpab_session_manager_gen_call_can_shutdown_sync (
    GpabSessionManagerGen *proxy,
    gboolean *out_is_available,
    GCancellable *cancellable,
    GError **error);

void gpab_session_manager_gen_call_logout (
    GpabSessionManagerGen *proxy,
    guint arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gpab_session_manager_gen_call_logout_finish (
    GpabSessionManagerGen *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gpab_session_manager_gen_call_logout_sync (
    GpabSessionManagerGen *proxy,
    guint arg_mode,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GPAB_TYPE_SESSION_MANAGER_GEN_PROXY (gpab_session_manager_gen_proxy_get_type ())
#define GPAB_SESSION_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPAB_TYPE_SESSION_MANAGER_GEN_PROXY, GpabSessionManagerGenProxy))
#define GPAB_SESSION_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPAB_TYPE_SESSION_MANAGER_GEN_PROXY, GpabSessionManagerGenProxyClass))
#define GPAB_SESSION_MANAGER_GEN_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPAB_TYPE_SESSION_MANAGER_GEN_PROXY, GpabSessionManagerGenProxyClass))
#define GPAB_IS_SESSION_MANAGER_GEN_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPAB_TYPE_SESSION_MANAGER_GEN_PROXY))
#define GPAB_IS_SESSION_MANAGER_GEN_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPAB_TYPE_SESSION_MANAGER_GEN_PROXY))

typedef struct _GpabSessionManagerGenProxy GpabSessionManagerGenProxy;
typedef struct _GpabSessionManagerGenProxyClass GpabSessionManagerGenProxyClass;
typedef struct _GpabSessionManagerGenProxyPrivate GpabSessionManagerGenProxyPrivate;

struct _GpabSessionManagerGenProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GpabSessionManagerGenProxyPrivate *priv;
};

struct _GpabSessionManagerGenProxyClass
{
  GDBusProxyClass parent_class;
};

GType gpab_session_manager_gen_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GpabSessionManagerGenProxy, g_object_unref)
#endif

void gpab_session_manager_gen_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpabSessionManagerGen *gpab_session_manager_gen_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GpabSessionManagerGen *gpab_session_manager_gen_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gpab_session_manager_gen_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GpabSessionManagerGen *gpab_session_manager_gen_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GpabSessionManagerGen *gpab_session_manager_gen_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GPAB_TYPE_SESSION_MANAGER_GEN_SKELETON (gpab_session_manager_gen_skeleton_get_type ())
#define GPAB_SESSION_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GPAB_TYPE_SESSION_MANAGER_GEN_SKELETON, GpabSessionManagerGenSkeleton))
#define GPAB_SESSION_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GPAB_TYPE_SESSION_MANAGER_GEN_SKELETON, GpabSessionManagerGenSkeletonClass))
#define GPAB_SESSION_MANAGER_GEN_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GPAB_TYPE_SESSION_MANAGER_GEN_SKELETON, GpabSessionManagerGenSkeletonClass))
#define GPAB_IS_SESSION_MANAGER_GEN_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GPAB_TYPE_SESSION_MANAGER_GEN_SKELETON))
#define GPAB_IS_SESSION_MANAGER_GEN_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GPAB_TYPE_SESSION_MANAGER_GEN_SKELETON))

typedef struct _GpabSessionManagerGenSkeleton GpabSessionManagerGenSkeleton;
typedef struct _GpabSessionManagerGenSkeletonClass GpabSessionManagerGenSkeletonClass;
typedef struct _GpabSessionManagerGenSkeletonPrivate GpabSessionManagerGenSkeletonPrivate;

struct _GpabSessionManagerGenSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GpabSessionManagerGenSkeletonPrivate *priv;
};

struct _GpabSessionManagerGenSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gpab_session_manager_gen_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GpabSessionManagerGenSkeleton, g_object_unref)
#endif

GpabSessionManagerGen *gpab_session_manager_gen_skeleton_new (void);


G_END_DECLS

#endif /* __GPAB_SESSION_MANAGER_GEN_H__ */
