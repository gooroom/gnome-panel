/*
 * Generated by gdbus-codegen 2.57.2 from org.freedesktop.login1.Manager.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __DBUS_LOGIN1_MANAGER_H__
#define __DBUS_LOGIN1_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Manager */

#define TYPE_LOGIN1_MANAGER (login1_manager_get_type ())
#define LOGIN1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOGIN1_MANAGER, Login1Manager))
#define IS_LOGIN1_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOGIN1_MANAGER))
#define LOGIN1_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_LOGIN1_MANAGER, Login1ManagerIface))

struct _Login1Manager;
typedef struct _Login1Manager Login1Manager;
typedef struct _Login1ManagerIface Login1ManagerIface;

struct _Login1ManagerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_can_hibernate) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hybrid_sleep) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_power_off) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_hibernate) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_hybrid_sleep) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_power_off) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_reboot) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

  gboolean (*handle_suspend) (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_interactive);

};

GType login1_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *login1_manager_interface_info (void);
guint login1_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void login1_manager_complete_power_off (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_reboot (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_suspend (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_hibernate (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_hybrid_sleep (
    Login1Manager *object,
    GDBusMethodInvocation *invocation);

void login1_manager_complete_can_power_off (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void login1_manager_complete_can_reboot (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void login1_manager_complete_can_suspend (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void login1_manager_complete_can_hibernate (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void login1_manager_complete_can_hybrid_sleep (
    Login1Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);



/* D-Bus method calls: */
void login1_manager_call_power_off (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_power_off_finish (
    Login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_power_off_sync (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_reboot (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_reboot_finish (
    Login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_reboot_sync (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_suspend (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_suspend_finish (
    Login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_suspend_sync (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_hibernate (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_hibernate_finish (
    Login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_hibernate_sync (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_hybrid_sleep (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_hybrid_sleep_finish (
    Login1Manager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_hybrid_sleep_sync (
    Login1Manager *proxy,
    gboolean arg_interactive,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_power_off (
    Login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_power_off_finish (
    Login1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_power_off_sync (
    Login1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_reboot (
    Login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_reboot_finish (
    Login1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_reboot_sync (
    Login1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_suspend (
    Login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_suspend_finish (
    Login1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_suspend_sync (
    Login1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_hibernate (
    Login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_hibernate_finish (
    Login1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_hibernate_sync (
    Login1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void login1_manager_call_can_hybrid_sleep (
    Login1Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean login1_manager_call_can_hybrid_sleep_finish (
    Login1Manager *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean login1_manager_call_can_hybrid_sleep_sync (
    Login1Manager *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_LOGIN1_MANAGER_PROXY (login1_manager_proxy_get_type ())
#define LOGIN1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOGIN1_MANAGER_PROXY, Login1ManagerProxy))
#define LOGIN1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_LOGIN1_MANAGER_PROXY, Login1ManagerProxyClass))
#define LOGIN1_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_LOGIN1_MANAGER_PROXY, Login1ManagerProxyClass))
#define IS_LOGIN1_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOGIN1_MANAGER_PROXY))
#define IS_LOGIN1_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_LOGIN1_MANAGER_PROXY))

typedef struct _Login1ManagerProxy Login1ManagerProxy;
typedef struct _Login1ManagerProxyClass Login1ManagerProxyClass;
typedef struct _Login1ManagerProxyPrivate Login1ManagerProxyPrivate;

struct _Login1ManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Login1ManagerProxyPrivate *priv;
};

struct _Login1ManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType login1_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Login1ManagerProxy, g_object_unref)
#endif

void login1_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Login1Manager *login1_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Login1Manager *login1_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void login1_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Login1Manager *login1_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Login1Manager *login1_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_LOGIN1_MANAGER_SKELETON (login1_manager_skeleton_get_type ())
#define LOGIN1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOGIN1_MANAGER_SKELETON, Login1ManagerSkeleton))
#define LOGIN1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_LOGIN1_MANAGER_SKELETON, Login1ManagerSkeletonClass))
#define LOGIN1_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_LOGIN1_MANAGER_SKELETON, Login1ManagerSkeletonClass))
#define IS_LOGIN1_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOGIN1_MANAGER_SKELETON))
#define IS_LOGIN1_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_LOGIN1_MANAGER_SKELETON))

typedef struct _Login1ManagerSkeleton Login1ManagerSkeleton;
typedef struct _Login1ManagerSkeletonClass Login1ManagerSkeletonClass;
typedef struct _Login1ManagerSkeletonPrivate Login1ManagerSkeletonPrivate;

struct _Login1ManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Login1ManagerSkeletonPrivate *priv;
};

struct _Login1ManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType login1_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Login1ManagerSkeleton, g_object_unref)
#endif

Login1Manager *login1_manager_skeleton_new (void);


G_END_DECLS

#endif /* __DBUS_LOGIN1_MANAGER_H__ */
